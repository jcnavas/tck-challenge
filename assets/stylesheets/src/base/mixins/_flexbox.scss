@mixin flex($display, $x-axis, $y-axis, $direction, $wrap) {
  @if $display == flex {
    @include flexbox();
  }  @else {
    @include inline-flex();
  }
  @include justify-content($x-axis);
  @include align-items($y-axis);
  @include flex-direction($direction);
  @include flex-wrap($wrap);
}

// Flexbox display
@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// Inline flex display
@mixin inline-flex {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

// Axis Alignment
@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
       -moz-box-pack: start;
       -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
       -moz-box-pack: end;
       -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
       -moz-box-pack: justify;
       -ms-flex-pack: justify;
  } @else if $value == space-around {
       -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
       -moz-box-pack: $value;
       -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
          justify-content: $value;
}

// Packing Flex Lines
@mixin align-content($value: stretch) {
  -webkit-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

// Cross-axis Alignment
@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
       -moz-box-align: start;
       -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
       -moz-box-align: end;
       -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
       -moz-box-align: $value;
       -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
          align-items: $value;
}

// Cross-axis Alignment
@mixin align-self($value: auto) {
  -webkit-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

// Flex Flow Direction
@mixin flex-direction($direction: row) {
  @if $direction == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
       -moz-box-direction: reverse;
       -moz-box-orient: horizontal;
  } @else if $direction == column {
    -webkit-box-direction: normal;
     -webkit-box-orient: vertical;
       -moz-box-direction: normal;
        -moz-box-orient: vertical;
  } @else if $direction == column-reverse {
    -webkit-box-direction: reverse;
      -webkit-box-orient: vertical;
       -moz-box-direction: reverse;
         -moz-box-orient: vertical;
  } @else {
     -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
        -moz-box-direction: normal;
       -moz-box-orient: horizontal;
  }
  -webkit-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

// Flex Line Wrapping
@mixin flex-wrap($value: nowrap) {
  -webkit-flex-wrap: $value;
  
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  
  flex-wrap: $value;
}

// Flex Direction and Wrap
@mixin flex-flow($values: (row nowrap)) {
  -webkit-flex-flow: $values;
      -ms-flex-flow: $values;
          flex-flow: $values;
}



//***************************************************

// Flex shorthand
@mixin flex-shorthand($grow: 1, $shrink: 0, $basis: auto) {
  $fg-boxflex: $grow;
  @if type-of($grow) == 'list' {
    $fg-boxflex: nth($grow, 1);
  }
   -webkit-box: $fg-boxflex;
      -moz-box: $fg-boxflex;
  -webkit-flex: $grow $shrink $basis;
      -ms-flex: $grow $shrink $basis;
          flex: $grow $shrink $basis;
}

// Display Order
@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
     -moz-box-ordinal-group: $int + 1;
              -webkit-order: $int;
             -ms-flex-order: $int;
                      order: $int;
}

// Flex grow factor
@mixin flex-grow($int: 1) {
   -webkit-box-flex: $int;
      -moz-box-flex: $int;
  -webkit-flex-grow: $int;
           -ms-flex: $int;
          flex-grow: $int;
}

// Flex shrink
@mixin flex-shrink($int: 0) {
  -webkit-flex-shrink: $int;
     -moz-flex-shrink: $int;
             -ms-flex: $int;
          flex-shrink: $int;
}

// Flex basis
@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
          flex-basis: $value;
}


